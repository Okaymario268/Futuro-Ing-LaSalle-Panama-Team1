#include <Servo.h>
#include <HCSR04.h>
#include <Pixy2.h>
// Pins for Motor
int R_IS = 2;
int R_EN = 5;
int R_PWM = 6;
int L_IS = 3;
int L_EN = 4;
int L_PWM = 7;

// Define the pins for the ultrasonic sensors
int LeftSensorPinTrig = 25;
int LeftSensorPinEcho = 24;
int RightSensorPinTrig = 22;
int RightSensorPinEcho = 23;
int FrontSensorPinTrig = 27;
int FrontSensorPinEcho = 26;

// Button pin
int ButtonPin = A0;

// Set the max range for the ultrasonic
int FrontDistanceRange = 35;
int LeftDistanceRange = 50;
int RightDistanceRange = 50;

// ServoMotor
int ServoPin = 28;

// Set the rotation of the servo
int LeftServoRotation = 180;
int RightServoRotation = 0;
int CenterServoRotation = 90;
int YellowServoRotation = 0;
// Signature for the PixyCam
int RedColorSignature = 1;
int GreenColorSignature = 2;
int YelloColorSignature  = 3;
int BlueColorSignature =  4;
// Debug
bool Debug = false;
bool ButtonEnabled = true; // Enable or disable button for testing purpose
bool EnableObstacleChallenge  = true;
// Conditions
bool ButtonPressed = false;
bool BotInRotation = false;
bool BotStopped = false;
bool YellowPreviuosDetected = false;
bool ObjectInFront = false;
bool ObstacleChangelleBotRotated = false; /// define if the bot ready complete the condition of the red or green pilar in the 2er round
int YellowLinePassed = 0; // Acumulate the yellow line passed (max 12)

int MaxYellowToDetect = 12;

HCSR04 LeftSensor(LeftSensorPinTrig, LeftSensorPinEcho);
HCSR04 RightSensor(RightSensorPinTrig, RightSensorPinEcho);
HCSR04 FrontSensor(FrontSensorPinTrig, FrontSensorPinEcho);
Servo servo;
Pixy2 pixy;

int DefaultVelocity = 130;
int VelocityEdge = 255;
int CurrentVelocity = DefaultVelocity;

int AcumuledAngle = CenterServoRotation;

void MotorForward() {
  analogWrite(R_PWM, 0);
  analogWrite(L_PWM, CurrentVelocity);
}

void MotorBackward() {
  analogWrite(R_PWM, CurrentVelocity);
  analogWrite(L_PWM, 0);
}

void ServoRotation(int Angle) {
  servo.write(Angle);
}

void setup() {
  pinMode(R_IS, OUTPUT);
  pinMode(R_EN, OUTPUT);
  pinMode(R_PWM, OUTPUT);
  pinMode(L_IS, OUTPUT);
  pinMode(L_EN, OUTPUT);
  pinMode(L_PWM, OUTPUT);
  digitalWrite(R_IS, LOW);
  digitalWrite(L_IS, LOW);
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  servo.attach(ServoPin);
  pinMode(ButtonPin, INPUT);
  Serial.begin(9600);

  servo.write(CenterServoRotation);

  // Initialize PID
  // steeringPID.SetMode(AUTOMATIC);
  // steeringPID.SetOutputLimits(0, 180);  // Servo range

  // Initialize PixyCam
  pixy.init();
  pixy.setLamp(1,0);

  ButtonPressed = false;
  BotInRotation = false;
  YellowPreviuosDetected = false;
  ObjectInFront = false;
  YellowLinePassed = 0;
  ObstacleChangelleBotRotated = false;


}

void loop() {

  if (BotStopped == true) {
    CurrentVelocity = 0;
    MotorForward();
    ServoRotation(CenterServoRotation);

    while (BotStopped == true) {
      return;
    }

  }

  if (ButtonEnabled == true) {
    while (ButtonPressed == false) {
      int buttonState = 0;
      buttonState = digitalRead(ButtonPin);
      if (buttonState == 0) {
        ButtonPressed = true;
        Serial.println("Pressed >");
      }
    }
  }

  int FrontDistance = FrontSensor.dist();
  int LeftDistance = LeftSensor.dist();
  int RightDistance = RightSensor.dist(); // Get the distance of the ultrasonic sensors

  bool RedBlockDetected = false;
  bool GreenBlockDetected = false;
  bool YellowLineDetected = false;
  bool BlueLineDetected = false;
  bool MargentaDetected = false;
  // Get the largest object detected by the PixyCam
  pixy.ccc.getBlocks();
  if (pixy.ccc.numBlocks) {
    for (int i = 0; i < pixy.ccc.numBlocks; i++) {
      if (pixy.ccc.blocks[i].m_signature == RedColorSignature) {
        RedBlockDetected = true;
      }
      if (pixy.ccc.blocks[i].m_signature == GreenColorSignature) {
        GreenBlockDetected = true;
      }
      if (pixy.ccc.blocks[i].m_signature == YelloColorSignature) {
        YellowLineDetected = true;
      }

      if (pixy.ccc.blocks[i].m_signature == BlueColorSignature) {
        BlueLineDetected = true;
      }

       if (pixy.ccc.blocks[i].m_signature == MargentaColorSignature) {
        MargentaDetected = true;
      }

    }
  }
 
  if (YellowLineDetected == true ) {
    // Code to handle yellow block detection
    BotInRotation = true;
    YellowPreviuosDetected = true;
    servo.write(YellowServoRotation);
     CurrentVelocity = VelocityEdge;
       MotorForward();
       delay(1100);
   
  } else if (RedBlockDetected == true && BotInRotation == false) {
    // Code to handle red block detection
    BotInRotation = true;
    ServoRotation(RightServoRotation);
     CurrentVelocity = DefaultVelocity;
    MotorForward();
  } else if (GreenBlockDetected == true && BotInRotation == false) {
    // Code to handle green block detection
    BotInRotation = true;
    ServoRotation(LeftServoRotation);
    CurrentVelocity = DefaultVelocity;
    MotorForward();
  } else {
         
       ServoRotation(CenterServoRotation);
       BotInRotation = false;
       CurrentVelocity = DefaultVelocity;
       MotorForward();

  }

   if (YellowPreviuosDetected == true && YellowLineDetected == false ) {
    YellowLinePassed = YellowLinePassed +1;
  }

  if (BlueLineDetected == true && YellowPreviuosDetected == true) {
      ServoRotation(CenterServoRotation);
       BotInRotation = false;
       CurrentVelocity = DefaultVelocity;
       MotorForward();
       YellowPreviuosDetected = false;
  }

  if (FrontDistance < 30 && FrontDistance > 20) {
    CurrentVelocity = 80;
    ObjectInFront = true;
    MotorForward();
  else if (FrontDistance <20 && FrontDistance > 10) {
      CurrentVelocity = 60;
      ObjectInFront = true;
      MotorForward();
      else if (FrontDistance < 5) {
        CurrentVelocity = 70;
        ObjectInFront = true;
        MotorBackward()
      }
    }
  }

  if (FrontDistance < 20 && ObjectInFront == true) {
    if (LeftDistance > RightDistance) {
      AcumuledAngle = (AcumuledAngle + 10);
      ServoRotation(AcumuledAngle);
    else if (RightDistance > LeftDistance) {
        AcumuledAngle = (AcumuledAngle - 10);
        ServoRotation(AcumuledAngle);
      }
    }
  } else if (FrontDistance > 20 && ObjectInFront == true) {
    AcumuledAngle = CenterServoRotation;
  }

  if (MaxYellowToDetect == YellowLinePassed) {
      if (EnableObstacleChallenge == true) {
      else {
            MotorForward();
            delay(800);
            BotStopped = true;



        }
      }

  } else if (YellowLinePassed == 7 && EnableObstacleChallenge == true && ObstacleChangelleBotRotate == false) {
    if (RedBlockDetected == true ) {
      MotorForward()
      delay(500)
      CurrentVelocity  = 20;
      MotorForward();
      ServoRotation(180);
      delay(200);
      MotorBackward();
      delay(200);
      MotorForward();
      ServoRotation(CenterServoRotation);
      else if (GreenBlockDetected == true) {
        ObstacleChangelleBotRotate = true;
      }
    }
  } 

  // Short delay
  delay(100);
 
  
   

}

